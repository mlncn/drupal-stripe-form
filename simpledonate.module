<?php

define('SIMPLEDONATE_INCOMPLETE', 0);
define('SIMPLEDONATE_COMPLETE', 1);
define('SIMPLEDONATE_ABANDONED', 2);

/**
 * Implements hook_menu().
 */
function simpledonate_menu() {
  $items = array();

  $items['simpledonate/remote'] = array(
    'title' => 'Catch post data',
    'access arguments' => array('access content'),
    'page callback' => 'simpledonate_remote',
    'type' => MENU_CALLBACK,
  );

  $items['simpledonate/form'] = array(
    'title' => 'Donate!',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpledonate_form'),
    'access callback' => TRUE,
  );
  $items['simpledonate/form/%'] = array(
    'title' => 'Donate!',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpledonate_form', 2),
    'access callback' => TRUE,
  );

  $items['simpledonate/form-snippet'] = array(
    'title' => 'Form code for adding to third-party sites.',
    'access arguments' => array('access content'),
    'page callback' => 'simpledonate_form_snippet',
  );

  $items['simpledonate/thankyou/%'] = array(
    'title' => 'Thank you for your donation!',
    'access arguments' => array('access content'),
    'page callback' => 'simpledonate_thankyou',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  $items['simpledonate/donors'] = array(
    'title' => 'Donors and attempted donors.',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'simpledonate_donors',
  );

  $items['simpledonate/donors/incomplete'] = array(
    'title' => 'Incomplete',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'simpledonate_donors',
    'page arguments' => array(SIMPLEDONATE_INCOMPLETE),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['simpledonate/donors/complete'] = array(
    'title' => 'Complete',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'simpledonate_donors',
    'page arguments' => array("" . SIMPLEDONATE_COMPLETE . ""),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/services/simpledonate'] = array(
    'title' => 'Simple donations with Stripe',
    'description' => 'Configure <a href="https://stripe.com/" target="_blank">Stripe</a> donations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('simpledonate_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/simpledonate.admin.inc',
  );

  return $items;
}

/**
 * Return array of valid currencies
 *
 * @return array
 */
function simpledonate_valid_currencies() {
  return array(
    'USD' => array('symbol' => '$'),
    'EUR' => array('symbol' => '&euro;'),
    'GBP' => array('symbol' => '&pound;'),
  );
}

/**
 * Return default values for a simpledonate record, used in pre-filling forms.
 */
function simpledonate_record_defaults() {
  return array(
    'did' => NULL,
    'email' => '',
    'amount' => '',
    'currency' => 'USD',
    'first_name' => '',
    'last_name' => '',
    'address' => '',
    'city' => '',
    'postal_code' => '',
  );
}

/**
 * Receive POST data from a third-party site.
 */
function simpledonate_remote() {
  $values = $_POST + simpledonate_record_defaults();

  $record = array(
    'email' => check_plain($values['email']),
    // Take donation amounts in whole number values only.
    'amount' => intval(check_plain($values['amount'])),
    'currency' => simpledonate_standardize_currency($values['currency']),
    'created' => time(),
  );
  drupal_write_record('simpledonate', $record);

  drupal_goto('simpledonate/form/' . $record['did']);
}

/**
 * Simple donation form.
 */
function simpledonate_form($form, &$form_state, $did = NULL) {
  $donate_record = simpledonate_load($did);
  $donate_record = $donate_record ? $donate_record : simpledonate_record_defaults();

  // TODO: Move to helper function?  See if form_set_error makes any sense here?
  // Let's make sure you have the stripe library installed.
  if ($path = libraries_get_path('stripe')) {
    if (!is_file($path . '/lib/Stripe.php')) {
      form_set_error('form', t('You need to install the stripe library from !link before you can use this form.', array('!link' => l('here', 'https://stripe.com/docs/libraries'))));
    }
  } else {
    form_set_error('form', t('You need to install the stripe library from !link before you can use this form.', array('!link' => l('here', 'https://stripe.com/docs/libraries'))));
  }

  $setting = array();
  $setting['stripeform'] = array(
    'pubkey' => variable_get('simpledonate_stripe_pub_key', ''),
    'form_selector' => str_replace('_', '-', __FUNCTION__),
  );

  $form['#attached'] = array(
    'js' => array(
      array('data' => $setting, 'type' => 'setting'),
    ),
    'library' => array(
      array('simpledonate', 'stripe'),
    ),
  );

  $form['stripeToken'] = array(
    '#type' => 'hidden',
    '#value' => !empty($form_state['input']['stripeToken']) ? $form_state['input']['stripeToken'] : NULL,
  );

  $form['did'] = array(
    '#type' => 'value',
    '#value' => $donate_record['did'],
  );

  $options = array();
  foreach (simpledonate_valid_currencies() as $key => $info) {
    $symbol = $info['symbol'];
    // Decode entities to work around something annoying core does.
    // This is how core works aronud itself: https://drupal.org/node/1919338
    $options[$key] = decode_entities($symbol);
  }

  $form['currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency'),
    '#options' => $options,
    '#default_value' => $donate_record['currency'],
    '#required' => TRUE,
  );

  $form['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#default_value' => $donate_record['amount'],
    '#description' => t('How much you can donate.'),
    '#size' => 6,
    '#required' => TRUE,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#default_value' => $donate_record['email'],
    '#size' => 36,
    '#required' => TRUE,
  );

  $form['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First name'),
    '#default_value' => $donate_record['first_name'],
    '#size' => 36,
    '#required' => TRUE,
  );

  $form['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),
    '#default_value' => $donate_record['last_name'],
    '#size' => 36,
    '#required' => TRUE,
  );

  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => $donate_record['address'],
    '#size' => 36,
  );

  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $donate_record['city'],
    '#size' => 36,
  );

  $form['postal_code'] = array(
    '#type' => 'textfield',
    '#title' => t('ZIP/Postal code'),
    '#default_value' => $donate_record['postal_code'],
    '#size' => 10,
    '#required' => FALSE,
  );

  $form['credit_card'] = array(
    '#type' => 'fieldset',
    '#title' => t('Credit Card Information'),
  );

  $cc = &$form['credit_card'];

  $cc['errors'] = array('#markup' => '<div class="payment-errors"></div>');

  $cc['card_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Credit Card Number'),
    '#pre_render' => array('simpledonate_remove_name'),
    '#attributes' => array(
      'size' => 20,
      'data-stripe' => 'number',
    ),
  );

  $cc['exp_month'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Month'),
    '#options' => simpledonate_get_month_options(),
    '#pre_render' => array('simpledonate_remove_name'),
    '#attributes' => array(
      'data-stripe' => 'exp-month',
    ),
    '#empty_option' => t('- Select -'),
  );

  $cc['exp_year'] = array(
    '#type' => 'select',
    '#title' => t('Expiration Year'),
    '#options' => array(),
    '#pre_render' => array('simpledonate_remove_name'),
    '#attributes' => array(
      'data-stripe' => 'exp-year',
    ),
    '#empty_option' => t('- Select -'),
  );

  $year = date('Y');
  for($i = $year; $i <= ($year + 10); $i++) {
    $cc['exp_year']['#options'][$i] = $i;
  }

  $cc['cvc'] = array(
    '#type' => 'textfield',
    '#title' => t('CVC Number'),
    '#pre_render' => array('simpledonate_remove_name'),
    '#attributes' => array(
      'size' => 4,
      'data-stripe' => 'cvc',
    ),
  );

  $cc['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Process donation'),
    '#attributes' => array(
      'class' => array('btn', 'btn-large', 'btn-primary'),
    ),
  );

  $form['actions']['submit']['#ajax'] = array(
    'callback' => 'simpledonate_form_ajax_callback',
    'wrapper' => 'simpledonate-form',
    'method' => 'replace',
    'effect' => 'fade',
  );
  // Adds our validation at the end of the build process.
  // Stripe skips this: $form['#after_build'][] = 'simpledonate_add_final_validation';

  return $form;
}

function simpledonate_form_ajax_callback($form, &$form_state) {
  return $form;
}

/**
 * Tries to add final validation after all else has been added through alters.
 */
function simpledonate_add_final_validation($form) {
  $form['#validate'][] = 'simpledonate_validate_form_payment';
  return $form;
}

/**
 * Form validation callback.
 */
function simpledonate_checkout_form_validate($form, &$form_state) {
  // Validate normal form elements as needed.
}

/**
 * Processes the stripe payment.
 *
 * We do this here so that if the payment fails,
 * we're still in a validation stage and can return
 * early.  If success, we'll pass the charge on
 * to the submission callback.
 */
function simpledonate_validate_form_payment($form, &$form_state) {
  if ($errors = form_get_errors()) {
    return;
  }
  $path = libraries_get_path('stripe');
  require_once($path . '/lib/Stripe.php');

  Stripe::setApiKey(variable_get('simpledonate_stripe_private_key', ''));

  $token = $form_state['values']['stripeToken'];
  $amount = $form_state['values']['amount'] * 100;
  $currency = simpledonate_standardize_currency($form_state['values']['currency']);

  // Create the charge on Stripe's servers - this will charge the user's card
  try {
    $charge = Stripe_Charge::create(array(
      "amount" => $amount,
      "currency" => $currency,
      "card" => $token,
      "description" => 'Donation to Friends of Foster Care India',
    ));

    $form_state['stripeform_charge'] = $charge;
  } catch(Stripe_CardError $e) {
     // The card has been declined
     watchdog('simpledonate', $e->getMessage());
     form_set_error('form', $e->getMessage());
  }
}

/**
 * Form submission handler.
 */
function simpledonate_form_submit($form, &$form_state) {
  drupal_set_message('Your payment is being processed.');
  $did = $form_state['values']['did'];
  $donate_record = simpledonate_load($did);
  $donate_record = $donate_record ? $donate_record : simpledonate_record_defaults();
  $donate_record['amount'] = $form_state['values']['amount'];
  $donate_record['currency'] = $form_state['values']['currency'];
  $donate_record['email'] = $form_state['values']['email'];
  $donate_record['first_name'] = $form_state['values']['first_name'];
  $donate_record['last_name'] = $form_state['values']['last_name'];
  $donate_record['address'] = $form_state['values']['address'];
  $donate_record['city'] = $form_state['values']['city'];
  $donate_record['postal_code'] = $form_state['values']['postal_code'];
  $donate_record['status'] = SIMPLEDONATE_COMPLETE;
  drupal_write_record('simpledonate', $donate_record);

  drupal_goto('simpledonate/thankyou/' . $donate_record['did']);
}

/**
 * FAPI #pre_render callback.
 *
 * Removes the name field form a form element.
 */
function simpledonate_remove_name($element) {
  unset($element['#name']);
  return $element;
}

/**
 * Implements hook_library().
 */
function simpledonate_library() {
  $module_path = drupal_get_path('module', 'simpledonate');

  $items['stripe'] = array(
    'title' => t('Stripe'),
    'version' => '1.0',
    'js' => array(
      'https://js.stripe.com/v1/' => array(),
      $module_path . '/js/stripe.js' => array(),
    ),
  );

  return $items;
}

/**
 * Show form code for copy-pasting.
 */
function simpledonate_form_snippet() {
  global $base_root;
  $options = '';
  foreach (simpledonate_valid_currencies() as $key => $info) {
    $symbol = $info['symbol'];
    $selected = ($key == 'USD') ? ' selected' : '';
    $options .= "\n    ";
    $options .= '<option value="' . $key . '"' . $selected . '>' . $symbol . '</option>';
  }

  $form_html = <<<EOD
<form action="$base_root/simpledonate/remote" method="post">
  <label for="email" style="display: none">E-mail address</label>
  <input type="text" name="email" placeholder="your@email.here" style="width: 300px" />
  <label for="currency" style="display: none">Currency</label>
  <select name="currency" style="width: 45px">$options
  </select>
  <label for="amount" style="display: none">Amount</label>
  <input type="text" value="50" name="amount" style="width: 220px" />
  <input type="submit" value="Donate!" />
</form>
EOD;

  $output = '<h2>Example (functioning) form</h2>';
  $output .= $form_html;
  $output .= '<h2>Code snippet that produces it</h2>';
  $output .= '<textarea cols="400" rows="20">' . $form_html . '</textarea>';

  return $output;
}

/**
 * Show authorized administrators information on who has tried to donate.
 */
function simpledonate_donors($type = SIMPLEDONATE_INCOMPLETE) {
  $data = simpledonate_load_multiple($type);
  $header = array(
    'email' => t('E-mail address'),
    'amount' => t('Offered donation'),
    'recurring' => t('Recurring'),
    'type' => t('Type'),
    'created' => t('Created'),
  );
  $donors = array();
  $currencies = simpledonate_valid_currencies();
  foreach ($data as $donor) {
    $donors[] = array(
      'email' => $donor['email'],
      'amount' => $currencies[$donor['currency']]['symbol'] . $donor['amount'],
      'recurring' => $donor['recurring'],
      'type' => $donor['type'],
      'created' => format_date($donor['created']),
    );
  }

  $page = array();
  $page['donors'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $donors,
  );
  return $page;
}

/**
 * Display a lovely thank you.
 */
function simpledonate_thankyou($did = NULL) {
  $donation = simpledonate_load($did);
  $valid_currencies = simpledonate_valid_currencies();
  $symbol = $valid_currencies[$donation['currency']]['symbol'];
  $output = 'Thank you for your generous donation of ' . $symbol . $donation['amount'] . '!';
  return $output;
}

/**
 * Load donation record by donation ID.
 */
function simpledonate_load($did) {
  return db_query("SELECT did, email, currency, amount, type, recurring, status, created FROM {simpledonate} WHERE did = :did", array(':did' => $did))->fetchAssoc();
}

/**
 * Load donation records.
 */
function simpledonate_load_multiple($type = NULL) {
  $sql = "SELECT did, email, currency, amount, type, recurring, status, created FROM {simpledonate}";
  if ($type !== NULL && is_numeric($type)) {
    $sql .= " WHERE type = " . $type;
  }
  return db_query($sql)->fetchAllAssoc('did', PDO::FETCH_ASSOC);
}

/**
 * Make currency uppercase and force to allowed currency (default to USD).
 */
function simpledonate_standardize_currency($currency) {
  $currency = strtoupper(check_plain($currency));
  // Stop invalid currencies right here and default to US dollar.
  if (!array_key_exists($currency, simpledonate_valid_currencies())) {
    $currency = 'USD';
  }
  return $currency;
}

/**
 * Return an array of months keyed by number.
 */
function simpledonate_get_month_options() {
  return drupal_map_assoc(
    array(1,2,3,4,5,6,7,8,9,10,11,12),
    '_simpledonate_convert_number_to_month'
  );
}

function _simpledonate_convert_number_to_month($month_number) {
  return date("F", mktime(0, 0, 0, $month_number, 10));
}